{"version":3,"sources":["serviceWorker.js","components/WebSocketWrapper/WebSocketWrapper.js","components/WebSocketExample/WebSocketExample.js","components/NoMatch/NoMatch.js","components/Home/Home.js","components/ChartPage/ChartPage.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","WebSocketWrapper","props","state","ws","WebSocket","url","protocol","attempts","sendMessage","bind","setupWebsocket","logline","this","debug","console","log","k","reconnectIntervalInMilliSeconds","Math","min","pow","websocket","onopen","logging","onOpen","onmessage","evt","data","onMessage","shouldReconnect","reconnect","onclose","onClose","time","generateInterval","timeoutID","setTimeout","setState","onerror","readyState","clearTimeout","close","message","JSON","stringify","send","React","Component","defaultProps","WebSocketExample","handleData","handleOpen","handleClose","refWebSocket","SERVER_URL","className","onClick","ref","Websocket","NoMatch","Home","ChartPage","App","CssBaseline","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.336780fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\n\nclass WebSocketWrapper extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ws: new WebSocket(this.props.url, this.props.protocol),\n            attempts: 1\n        };\n        this.sendMessage = this.sendMessage.bind(this);\n        this.setupWebsocket = this.setupWebsocket.bind(this);\n    }\n\n    logging(logline) {\n        if (this.props.debug === true) {\n            console.log(logline);\n        }\n    }\n\n    generateInterval(k) {\n        if (this.props.reconnectIntervalInMilliSeconds > 0) {\n            return this.props.reconnectIntervalInMilliSeconds;\n        }\n        return Math.min(30, (Math.pow(2, k) - 1)) * 1000;\n    }\n\n    setupWebsocket() {\n        let websocket = this.state.ws;\n\n        websocket.onopen = () => {\n            this.logging('Websocket connected');\n            if (typeof this.props.onOpen === 'function') this.props.onOpen();\n        };\n\n        websocket.onmessage = (evt) => {\n            console.log(evt.data);\n            this.props.onMessage(evt.data);\n        };\n\n        this.shouldReconnect = this.props.reconnect;\n\n        websocket.onclose = () => {\n            this.logging('Websocket disconnected');\n            if (typeof this.props.onClose === 'function') this.props.onClose();\n            if (this.shouldReconnect) {\n                let time = this.generateInterval(this.state.attempts);\n                this.timeoutID = setTimeout(() => {\n                    this.setState({attempts: this.state.attempts + 1});\n                    this.setState({ws: new WebSocket(this.props.url, this.props.protocol)});\n                    this.setupWebsocket();\n                }, time);\n            }\n        };\n\n        websocket.onerror = (evt) => {\n            console.log(\"++++++++++++++++++\");\n            console.log(\"ERROR WS: \", websocket.readyState);\n            console.log(this.props.url);\n            console.log(\"++++++++++++++++++\");\n        };\n    }\n\n    componentDidMount() {\n        this.setupWebsocket();\n    }\n\n    componentWillUnmount() {\n        this.shouldReconnect = false;\n        clearTimeout(this.timeoutID);\n        let websocket = this.state.ws;\n        websocket.close();\n    }\n\n    sendMessage(message) {\n        let websocket = this.state.ws;\n        message = JSON.stringify(message);\n        websocket.send(message);\n    }\n\n    render() {\n        return (\n            <Fragment/>\n        );\n    }\n}\n\nWebSocketWrapper.defaultProps = {\n    debug: false,\n    reconnect: true\n};\n\nWebSocketWrapper.propTypes = {\n    url: PropTypes.string.isRequired,\n    onMessage: PropTypes.func.isRequired,\n    onOpen: PropTypes.func,\n    onClose: PropTypes.func,\n    debug: PropTypes.bool,\n    reconnect: PropTypes.bool,\n    protocol: PropTypes.string,\n    reconnectIntervalInMilliSeconds: PropTypes.number\n};\n\nexport default WebSocketWrapper;\n","import React from 'react';\nimport './WebSocketExample.css';\nimport WebSocketWrapper from \"../WebSocketWrapper/WebSocketWrapper\";\n\n\nclass WebSocketExample extends React.Component {\n    constructor(props) {\n        super(props);\n        this.SERVER_URL = \"ws://localhost:43968/example_ws/echo-example\";\n    }\n\n    handleData = (data) => {\n        console.log(\"Data received\");\n        console.log(data);\n    };\n\n    handleOpen = () => {\n        console.log(\"Connected to Server\");\n    };\n\n    handleClose = () => {\n        console.log(\"Disconnected from Server\");\n    };\n\n    sendMessage = (message) => {\n        this.refWebSocket.sendMessage(message);\n    };\n\n    render() {\n        return (\n            <div className=\"WebSocketExample\">\n                <button onClick={() => this.sendMessage(\"Hello World!\")}>Send Message</button>\n                <WebSocketWrapper\n                    url={this.SERVER_URL} onMessage={this.handleData}\n                    onOpen={this.handleOpen} onClose={this.handleClose}\n                    reconnect={true} debug={true}\n                    ref={Websocket => {\n                        this.refWebSocket = Websocket;\n                    }}/>\n            </div>\n        );\n    }\n}\n\nexport default WebSocketExample;","import React from 'react';\nimport './NoMatch.css';\n\nfunction NoMatch() {\n    return (\n        <div className=\"NoMatch\">\n            Sorry, this page doesn't exist. Click Here to Go Back Home.\n        </div>\n    );\n}\n\nexport default NoMatch;","import React, {Component} from 'react';\nimport './Home.css';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"Home\">\n                HOME PAGE\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\nimport './ChartPage.css';\n\nclass ChartPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"ChartPage\">\n                Chart Page\n            </div>\n        );\n    }\n}\n\nexport default ChartPage;","import React, {Fragment} from 'react';\nimport './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport WebSocketExample from \"../WebSocketExample/WebSocketExample\";\nimport NoMatch from \"../NoMatch/NoMatch\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Home from \"../Home/Home\";\nimport ChartPage from \"../ChartPage/ChartPage\";\n\nfunction App() {\n    return (\n        <Fragment>\n            <CssBaseline/>\n            <div className=\"App\">\n                {/*<NavBar/>*/}\n                <Switch>\n                    <Route exact path=\"/\" component={ChartPage}/>\n                    <Route exact path=\"/home\" component={Home}/>\n                    <Route exact path=\"/example\" component={WebSocketExample}/>\n                    <Route component={NoMatch}/>\n                </Switch>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./components/App/App\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(<BrowserRouter><App/></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}